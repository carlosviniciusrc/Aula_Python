# Introdu√ß√£o √† fun√ß√£o lambda (fun√ß√£o an√¥nima de uma linha)
# A fun√ß√£o lambda √© uma fun√ß√£o como qualquer
# outra em Python. Por√©m, s√£o fun√ß√µes an√¥nimas
# que cont√©m apenas uma linha. Ou seja, tudo
# deve ser contido dentro de uma √∫nica
# express√£o.

# Em Python, tanto sort() quanto sorted() s√£o usados para ordenar elementos, 
# mas h√° diferen√ßas importantes entre eles:

# sort()
# Tipo: m√©todo de listas.
# Modifica a lista original (ordenando os elementos in-place).
# Retorna: None.

# sorted()
# Tipo: fun√ß√£o built-in (funciona com qualquer iter√°vel, como listas, tuplas, dicion√°rios, etc.).
# N√£o modifica o iter√°vel original, faz uma c√≥pia rasa.
# Retorna: uma nova lista ordenada.

# Se quiser ordenar sem alterar os dados originais, use sorted(). 
# Se quiser economizar mem√≥ria e alterar diretamente uma lista, use sort(). 
# Ambos aceitam os par√¢metros key= e reverse= para personalizar a ordena√ß√£o.
# Se quiser, posso mostrar um exemplo usando key tamb√©m.

# lista = [4, 32, 1, 34, 5, 6, 6, 21, ]
# lista.sort(reverse=True)
# sorted(lista)


# Ordenando a lista por fun√ß√£o

lista = [
    {'nome': 'Luiz', 'sobrenome': 'Miranda'},
    {'nome': 'Maria', 'sobrenome': 'Oliveira'},
    {'nome': 'Daniel', 'sobrenome': 'Silva'},
    {'nome': 'Eduardo', 'sobrenome': 'Moreira'},
    {'nome': 'Aline', 'sobrenome': 'Souza'},
]

def ordena(item):
    # Nesse return est√° pedindo para a lista ser 
    # ordenada a partir da chave 'nome'.
    return item['nome']

# O par√¢metro key em sort() permite personalizar a forma como os elementos 
# s√£o comparados ao ordenar. Voc√™ passa uma fun√ß√£o para key, e essa fun√ß√£o 
# ser√° aplicada a cada elemento antes da compara√ß√£o.
lista.sort(key=ordena)

# Exibindo a lista ordenada
for itens in lista:
    print(itens)

# Ordenando por lambda

# Em Python, lambda √© uma maneira de criar fun√ß√µes pequenas
# e an√¥nimas (sem nome) em uma √∫nica linha.

# Essas fun√ß√µes geralmente s√£o usadas quando voc√™ precisa de uma fun√ß√£o r√°pida 
# e simples, que ser√° usada s√≥ uma vez, especialmente como argumento para outras 
# fun√ß√µes.

# üß± Estrutura da lambda

# lambda argumentos: express√£o

# lambda ‚Üí palavra-chave para criar a fun√ß√£o.
# argumentos ‚Üí como os par√¢metros de uma fun√ß√£o.
# express√£o ‚Üí o que ser√° retornado (n√£o precisa escrever return).

# Com sort()
lista.sort(key=lambda item: item['nome'])

# Com sorted()

def exibidor(lista):
    for item in lista:
        print(item)
    print()


l1 = sorted(lista, key=lambda item: item['nome'])
l2 = sorted(lista, key=lambda item: item['sobrenome'])

exibidor(l1)
exibidor(l2)

# Ex 2

# fun√ß√£o comum
def quadrado(x):
    return x * x

# Fun√ß√£o lambda

f = lambda x: x * x

print(f(5))